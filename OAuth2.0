To read emails from Office 365 directly in a Java program without involving an external browser or app, you can use the OAuth 2.0 Client Credentials Flow. This approach allows your application to authenticate as itself (not as a specific user), and it can access mailboxes with admin-granted permissions.

Below is the guide and Java code for this implementation.

1. Setup in Azure AD
	1.	Register the application:
	•	Go to Azure Portal > Azure Active Directory > App Registrations > New Registration.
	•	Set the Redirect URI to “http://localhost” (not used in client credentials flow, but required for registration).
	2.	Add API Permissions:
	•	Under your app, go to “API Permissions” > Add a permission > Microsoft Graph > Application Permissions.
	•	Add Mail.Read and grant admin consent.
	3.	Generate a Client Secret:
	•	Go to “Certificates & secrets” and create a new client secret. Save the secret key for later use.
	4.	Assign Permissions to the Mailbox:
	•	Use PowerShell (or Azure portal) to assign the app access to the mailbox:

Connect-ExchangeOnline -UserPrincipalName admin@yourdomain.com
New-ApplicationAccessPolicy -AppId "your-app-id" -PolicyScopeGroupId "mail-enabled-security-group-id" -AccessRight RestrictAccess -Description "Restrict app access"

2. Add Dependencies

Add the following dependencies in your pom.xml:

<dependencies>
    <!-- Microsoft Authentication Library -->
    <dependency>
        <groupId>com.microsoft.aad.msal4j</groupId>
        <artifactId>msal4j</artifactId>
        <version>1.13.8</version>
    </dependency>
    <!-- HTTP Client -->
    <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpclient</artifactId>
        <version>4.5.13</version>
    </dependency>
    <!-- JSON Parsing -->
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <version>2.15.2</version>
    </dependency>
</dependencies>

3. Java Code to Read Emails

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.microsoft.aad.msal4j.*;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;

import java.net.URI;
import java.util.Collections;
import java.util.concurrent.CompletableFuture;

public class Office365EmailReader {

    private static final String CLIENT_ID = "your-client-id"; // Replace with your app's client ID
    private static final String CLIENT_SECRET = "your-client-secret"; // Replace with your app's client secret
    private static final String TENANT_ID = "your-tenant-id"; // Replace with your tenant ID
    private static final String AUTHORITY = "https://login.microsoftonline.com/" + TENANT_ID;
    private static final String GRAPH_API_URL = "https://graph.microsoft.com/v1.0/users/{user-email}/messages";

    public static void main(String[] args) {
        try {
            String userEmail = "target-user-email@domain.com"; // Replace with the target mailbox email
            String accessToken = getAccessToken();
            fetchEmails(accessToken, userEmail);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static String getAccessToken() throws Exception {
        ConfidentialClientApplication app = ConfidentialClientApplication.builder(
                CLIENT_ID,
                ClientCredentialFactory.createFromSecret(CLIENT_SECRET))
                .authority(AUTHORITY)
                .build();

        ClientCredentialParameters parameters = ClientCredentialParameters.builder(
                Collections.singleton("https://graph.microsoft.com/.default"))
                .build();

        CompletableFuture<IAuthenticationResult> future = app.acquireToken(parameters);
        return future.get().accessToken();
    }

    private static void fetchEmails(String accessToken, String userEmail) throws Exception {
        CloseableHttpClient httpClient = HttpClients.createDefault();
        String url = GRAPH_API_URL.replace("{user-email}", userEmail);
        HttpGet request = new HttpGet(url);
        request.addHeader("Authorization", "Bearer " + accessToken);

        try (CloseableHttpResponse response = httpClient.execute(request)) {
            ObjectMapper mapper = new ObjectMapper();
            JsonNode rootNode = mapper.readTree(response.getEntity().getContent());

            for (JsonNode message : rootNode.get("value")) {
                String subject = message.get("subject").asText();
                String sender = message.get("from").get("emailAddress").get("address").asText();
                System.out.println("Subject: " + subject);
                System.out.println("From: " + sender);
                System.out.println("-------------------");
            }
        }
    }
}

4. How It Works
	1.	Authentication: The application authenticates itself using the client credentials flow.
	•	The getAccessToken method retrieves an access token for the app.
	•	The app uses this token to query the Microsoft Graph API.
	2.	Fetching Emails:
	•	Replace {user-email} in the API URL with the email address of the target mailbox.
	•	The fetchEmails method makes a GET request to the Microsoft Graph API to retrieve messages.

5. Run the Program
	1.	Replace the placeholders (your-client-id, your-client-secret, your-tenant-id, and target-user-email@domain.com) in the code with real values.
	2.	Run the program, and it will fetch emails directly from Office 365.

Notes
	•	This approach works for application-level access. If you need to fetch emails for multiple users, make sure the app has appropriate permissions.
	•	Use Mail.ReadWrite if you need to modify emails.
	•	Make sure the tenant admin has granted admin consent for the application permissions in Azure AD.
